<project library-octave="False" library-rpc="False" target_env="C++"><configuration><parameter default="100" description="" name="N" policy="mandatory" type="int" /><build-option name="LIBS" /><build-option name="CFLAGS">-O0 -ggdb</build-option><head-code>
struct Segment{
	std::vector&lt;int&gt; marks;
	int start;

	void pack(ca::Packer &amp;packer) const {
		packer &lt;&lt; start;
		packer &lt;&lt; marks.size();
		for (int i = 0; i &lt; marks.size(); i++) {
			packer &lt;&lt; marks[i];
		}
	}

	void unpack(ca::Unpacker &amp;unpacker) {
		unpacker &gt;&gt; start;
		size_t size;
		unpacker &gt;&gt; size;
		marks.resize(size);
		for (int i = 0; i &lt; marks.size(); i++) {
			unpacker &gt;&gt; marks[i];
		}
	}

};


namespace ca {
	
	CA_TOKEN_NAME(Segment, segment) {
		std::stringstream s;
		s &lt;&lt; "[" &lt;&lt; segment.start &lt;&lt; "," &lt;&lt; segment.start + segment.marks.size() - 1 &lt;&lt; "]";
		for (int i = 0; i &lt; segment.marks.size(); i++) {
			if (segment.marks[i]) {
				s &lt;&lt; " " &lt;&lt; segment.start + i;
			}
		}
		return s.str();
	}
}</head-code></configuration><net id="101" name="Main"><area id="118" sx="120" sy="90" x="-102" y="-66"><init x="-90" y="-85">ctx.all_processes()</init></area><place id="102" label-x="-66" label-y="-30" name="segment" radius="20" sx="22" sy="4" x="-66" y="-30"><place-type x="-35" y="-2">Segment</place-type><init x="-49" y="-60" /><code>	int s = (param::N() - 2) / ctx.process_count() + 1;
	Segment segment;	
	segment.start = ctx.process_id() * s + 2;
	if (segment.start + s &gt; param::N()) {
		s = param::N() - segment.start;
	}
	segment.marks.resize(s, true);
	place.add(segment);
</code><trace trace-tokens="False" /></place><place id="104" label-x="36" label-y="60" name="number" radius="20" sx="24" sy="0" x="36" y="60"><place-type x="60" y="84">int</place-type><init x="60" y="30">[2]</init><trace trace-tokens="False" /></place><place id="107" label-x="324" label-y="60" name="next&#10;number" radius="20" sx="24" sy="0" x="324" y="60"><place-type x="354" y="84">int</place-type><init x="341" y="30" /><trace trace-tokens="False" /></place><place id="109" label-x="402" label-y="-30" name="prime" radius="20" sx="12" sy="0" x="402" y="-30"><place-type x="432" y="-6">int</place-type><init x="419" y="-60" /><trace trace-tokens="False" /></place><transition clock="False" collective="False" id="103" label-x="161" label-y="-30" name="Find&#10;prime" priority="" sx="70" sy="36" x="126" y="-48"><guard x="126" y="-68" /><code>
	int end = var.segment.start + var.segment.marks.size();

	if (var.num * var.num &gt; param::N()) {		
		for (int i = var.num; i &lt; end; i++) {
			if (var.segment.marks[i - var.segment.start]) {		
				printf("%i\n", i);
			}
		}
	} else {
		for (int i = var.num; i &lt; end; i++) {
			if (var.segment.marks[i - var.segment.start]) {		
				printf("%i\n", i);
				var.prime = i;
				var.next_num = i+1;
				var.targets = ca::range(ctx.process_id(), ctx.process_count());
				return;
			}
		}
	}
	var.prime = -1;
	var.next_num = -1;
	int next = ctx.process_id() + 1;
	if (next == ctx.process_count()) {
		ctx.quit();
	} else {
		var.targets = ca::range(ctx.process_id(), ctx.process_count());
	}
</code></transition><transition clock="False" collective="False" id="111" label-x="161" label-y="156" name="Mark&#10;composites" priority="" sx="70" sy="36" x="126" y="138"><guard x="126" y="118" /><code>	if (var.prime == -1) {
		++var.c;
		if (var.c == ctx.process_id()) {
			var.start.add(var.segment.start);
		}
	} else {
		for (int i = (var.prime - (var.segment.start % var.prime)) % var.prime; i &lt; var.segment.marks.size(); i += var.prime) {
			var.segment.marks[i] = false;
		}
	}
</code></transition><edge bidirectional="true" from_item="102" id="105" to_item="103"><inscription x="31.0" y="-47.0">segment</inscription></edge><edge from_item="104" id="106" to_item="103"><inscription x="61.7219262114" y="1.61141269543">num</inscription><point x="48" y="0" /></edge><edge from_item="103" id="108" to_item="107"><inscription x="168.0" y="-7.75031847134">[if(next_num &gt; 0)] next_num</inscription><point x="336" y="-12" /></edge><edge from_item="103" id="110" to_item="109"><inscription x="225.0" y="-48.0">[multicast] prime@targets</inscription></edge><edge from_item="109" id="113" to_item="111"><inscription x="420.0" y="68.0">prime</inscription><point x="408" y="156" /></edge><edge from_item="107" id="114" to_item="111"><inscription x="254.631518192" y="120.071754642">[bulk] start</inscription><point x="336" y="138" /></edge><edge from_item="111" id="115" to_item="104"><inscription x="60.0" y="117.923076923">[bulk] start</inscription><point x="48" y="138" /></edge><edge bidirectional="true" from_item="111" id="116" to_item="102"><inscription x="-42.0" y="66.0">segment</inscription><point x="-54" y="156" /></edge><place id="120" label-x="150.0" label-y="60.0" name="counter" radius="20" sx="18" sy="0" x="150" y="60"><place-type x="167.0" y="77.0">int</place-type><init x="174" y="30">[0]</init><trace trace-tokens="False" /></place><edge bidirectional="true" from_item="120" id="121" to_item="111"><inscription x="168.0" y="102.0">c</inscription></edge><area id="122" sx="86.0" sy="74.5" x="114" y="24"><init x="114.0" y="9.0">ctx.all_processes()</init></area></net><sequence name="Sequence23">0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
3 0 S #111
3 0 F
1 0 S #111
1 0 F
0 0 S #111
0 0 F
2 0 S #111
2 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
2 0 S #111
2 0 F
1 0 S #111
1 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
0 0 S #111
0 0 F
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
1 0 S #111
1 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
3 0 S #111
3 0 F
0 0 S #111
0 0 F
1 0 S #111
1 0 F
2 0 S #111
2 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0</sequence><sequence name="XSequence">0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
3 0 S #111
3 0 F
1 0 S #111
1 0 F
0 0 S #111
0 0 F
2 0 S #111
2 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
2 0 S #111
2 0 F
1 0 S #111
1 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
0 0 S #111
0 0 F
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
2 0 S #111
2 0 F
3 0 S #111
3 0 F
0 0 S #111
0 0 F
1 0 S #111
1 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
3 0 S #111
3 0 F
0 0 S #111
0 0 F
1 0 S #111
1 0 F
2 0 S #111
2 0 F
0 0 S #103
0 0 F
0 0 R 0
1 0 R 0
2 0 R 0
3 0 R 0
1 0 S #111
1 0 F
2 0 S #111
2 0 F
0 0 S #111
0 0 F
3 0 S #111
3 0 F
0 0 S #103
0 0 F
1 0 R 0
1 0 S #111
1 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
2 0 S #111
2 0 F
3 0 S #111
3 0 F
1 0 S #111
1 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
3 0 S #111
3 0 F
1 0 S #111
1 0 F
2 0 S #111
2 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
2 0 S #111
2 0 F
1 0 S #111
1 0 F
3 0 S #111
3 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
1 0 S #111
1 0 F
3 0 S #111
3 0 F
2 0 S #111
2 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
2 0 S #111
2 0 F
1 0 S #111
1 0 F
3 0 S #111
3 0 F
1 0 S #103
1 0 F
1 0 R 1
2 0 R 1
3 0 R 1
3 0 S #111
3 0 F
1 0 S #111
1 0 F
2 0 S #111
2 0 F
1 0 S #103
1 0 F
2 0 R 1
2 0 S #111
2 0 F
2 0 S #103
2 0 F
2 0 R 2
3 0 R 2
2 0 S #111
2 0 F
3 0 S #111
3 0 F</sequence></project>