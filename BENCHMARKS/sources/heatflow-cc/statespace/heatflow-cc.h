/* This file is automatically generated
   do not edit this file directly! */

#ifndef KAIRA_PROJECT_heatflow_cc
#define KAIRA_PROJECT_heatflow_cc
#include <cailie.h>
#include <algorithm>
#include <stdlib.h>
#include <stdio.h>
#include <sstream>

struct param
{
	static ca::ParameterInt SIZE_X;
	static ca::ParameterInt LIMIT;
	static ca::ParameterInt SIZE_Y;
	static ca::ParameterInt TEMP;
};

#line 1 "*head"

#include <compute.h>

namespace ca {

	CA_TOKEN_NAME(DoubleMatrix, m) {
		return "DoubleMatrix";
	}
	
	CA_PACK(DoubleMatrix, packer, m) {
		packer << m.get_size_x() << m.get_size_y();
		pack(packer, m.get_data(), m.get_data_size());
	}
	
	CA_UNPACK(DoubleMatrix, unpacker, m) {
		int size_x, size_y;
		unpacker >> size_x >> size_y;
		m.setup(size_x, size_y);
		m.set_data((double*) unpacker.unpack_data(m.get_data_size()));
		m.swap();		
	}		
}

int to_down(ca::Context &ctx)
{
	return (ctx.process_id() + 1) % ctx.process_count();
}

int to_up(ca::Context &ctx)
{
	return (ctx.process_id() + ctx.process_count() - 1) 
			% ctx.process_count();
}

#endif // KAIRA_PROJECT_heatflow_cc
